Step 1: Install Helm
If you don’t already have Helm installed, you can install it using the following commands:


curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
Check if Helm is correctly installed by running:


helm version
Step 2: Add the Bitnami Repository
The Bitnami Helm repository contains the WordPress chart, which is maintained and widely used for production deployments.


helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo update
Step 3: Install WordPress using Helm
The following command will install WordPress along with a MariaDB database for persistence.


helm install my-wordpress bitnami/wordpress
This will install WordPress with default values. For production, we will customize the configuration.
Step 4: Configure WordPress for Production
For production environments, you’ll want to configure a few things:
1.	External Database: It's a good practice to use an external managed database for production (e.g., Amazon RDS or Google Cloud SQL).
2.	Persistent Storage: Use persistent volumes (PV) backed by reliable storage solutions (e.g., AWS EBS, GCP Persistent Disk).
3.	TLS/SSL: Secure your WordPress instance with HTTPS.
4.	Load Balancer/Ingress: Set up Ingress for domain-based routing and SSL termination.
To customize the Helm chart, you can download the default values.yaml and modify it according to your needs.


helm show values bitnami/wordpress > wordpress-values.yaml
In wordpress-values.yaml, modify the following values:
1.	Database Configuration: Disable MariaDB and configure an external database:
yaml

mariadb.enabled: false
externalDatabase.host: your-database-host
externalDatabase.user: your-db-user
externalDatabase.password: your-db-password
externalDatabase.database: your-db-name
externalDatabase.port: your-db-port
2.	Persistence Configuration: Ensure persistence is enabled and adjust storage size if necessary.
yaml

persistence:
  enabled: true
  storageClass: "your-storage-class"
  accessModes: 
    - ReadWriteOnce
  size: 10Gi # Adjust size as needed
3.	Ingress Configuration: Enable Ingress and configure for TLS:
yaml

ingress:
  enabled: true
  hostname: wordpress.yourdomain.com
  tls: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  tls:
    - secretName: wordpress-tls
      hosts:
        - wordpress.yourdomain.com
Step 5: Install WordPress with Custom Values
After modifying the values.yaml, use it to install WordPress with the customized settings.


helm install my-wordpress bitnami/wordpress -f wordpress-values.yaml
Step 6: Verify the Installation
You can check the status of your deployment using:


helm status my-wordpress
kubectl get pods
kubectl get svc
Ensure that the pods are running, the service is up, and the load balancer is created.
Step 7: Access WordPress
If you set up a load balancer, you can find the external IP address:


kubectl get svc
Use the external IP to access your WordPress installation. If you're using Ingress, use your configured domain (e.g., wordpress.yourdomain.com).
Step 8: Secure with TLS (Optional)
If you are using Cert-Manager, you can set up automatic SSL using Let's Encrypt.
1.	Install Cert-Manager:


kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.10.0/cert-manager.yaml
2.	Create a ClusterIssuer for Let’s Encrypt:
yaml

apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: your-email@example.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: nginx
3.	Apply the ClusterIssuer:


kubectl apply -f cluster-issuer.yaml
Helm will automatically issue certificates for your WordPress installation.
Step 9: Manage the WordPress Deployment
Once deployed, you can manage your WordPress instance using Helm commands:
•	Upgrade WordPress:


helm upgrade my-wordpress bitnami/wordpress -f wordpress-values.yaml
•	Roll back to a previous version:


helm rollback my-wordpress 1

